{"version":3,"sources":["modules/utils.js","modules/tooltip.js","modules/slider.js","modules/chart.js","data.js","app.js"],"names":["computeYRatio","height","max","min","computeXRatio","width","length","toDate","timestamp","shortMouths","date","Date","getMonth","getDate","isOver","mouse","x","dWidth","Math","abs","line","ctx","coords","color","translate","beginPath","save","lineWidth","strokeStyle","y","lineTo","stroke","restore","closePath","circle","rad","fillStyle","arc","PI","fill","computeBounderies","columns","types","forEach","col","i","css","el","styles","Object","assign","style","toCoords","xRatio","yRatio","DPI_HEIGHT","PADDING","yMin","map","floor","filter","_","template","data","title","items","item","value","name","join","tooltip","show","left","top","getBoundingClientRect","innerHTML","display","insertAdjacentHTML","hide","noop","HEIGHT","sliderChart","root","DPI_WIDTH","WIDTH","MIN_WIDTH","canvas","querySelector","getContext","nextFn","$left","$window","$right","next","getPosition","setPosition","right","w","parseInt","addEventListener","mousedown","event","type","target","dataset","demensions","startX","pageX","document","onmousemove","e","delta","mouseup","yMax","yData","idx","colors","subscribe","fn","VIEW_HEIGHT","VIEW_WIDTH","ROWS_COUNT","CIRCLE_RADIUS","SPEED","chart","raf","tip","slider","proxy","Proxy","set","result","Reflect","requestAnimationFrame","paint","mousemove","clientX","clientY","mouseleave","clearRect","leftIndex","round","pos","rightIndex","res","slice","unshift","xData","yAxis","step","textStep","font","text","fillText","toString","moveTo","xAxis","colsCount","names","init","destroy","cancelAnimationFrame","removeEventListener","getChartData","y0","y1","tgChart"],"mappings":"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,KAAA,MAAA,CAAA,IAAA,EAAA,EAAA,EAAA,MAAA,GAAjBN,EAAiB,EAAA,GAAda,EAAc,EAAA,GACvB,IAAA,EAAOmG,EAAAA,QAAAA,EAAMjH,MAAOC,EAAGM,EAAOhB,OAAQ6E,GAAY,EAC7C9D,EAAAA,EAAAA,QAAAA,EAAK,CAACL,EAAGa,GAAI,CAAEN,MAAAA,GAASmG,GAC/B,QAPoB,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,OAiEvB,OA/IPK,EAAOV,UAAU,SAACyB,GAChBd,EAAMc,IAAMA,IAsBdxD,EAAOa,iBAAiB,YAAaoC,GACrCjD,EAAOa,iBAAiB,aAAcuC,GAuH/B,CACLqB,KAAO,WACLzB,KAEF0B,QAAU,WACRC,qBAAqBpC,GACrBvC,EAAO4E,oBAAoB,YAAa3B,GACxCjD,EAAO4E,oBAAoB,aAAcxB;;ACkK9C,aA7WM,SAASyB,IACP,MACL,CACE1H,QAAS,CACP,CACE,IACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,QACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,SACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,SACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,SACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,YAEF,CACE,KACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,IACA,GACA,GACA,GACA,GACA,IACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,IACA,GACA,GACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,IACA,GACA,GACA,GACA,GACA,IACA,IACA,IACA,IAEF,CACE,KACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,IACA,GACA,GACA,IACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,KAGJC,MAAO,CACL0H,GAAI,OACJC,GAAI,OACJrJ,EAAG,KAEL8I,MAAO,CACLM,GAAI,KACJC,GAAI,MAENjD,OAAQ,CACNgD,GAAI,UACJC,GAAI,YAIX,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA;;;;ACzWD,aAJA,IAAA,EAAA,QAAA,mBACA,EAAA,QAAA,UACA,QAAA,iBAEA,IAAMC,GAAU,EAAM1D,EAAAA,OAAAA,SAASrB,cAAc,WAAW,EAAxC,EAAA,iBAAwDwE","file":"app.99da527e.js","sourceRoot":"..\\src","sourcesContent":["export function computeYRatio(height, max, min) {\r\n    return  (max - min) / height\r\n}\r\n\r\nexport function computeXRatio(width, length) {\r\n    return width / (length - 2)\r\n}\r\n\r\nexport function toDate(timestamp) {\r\n    const shortMouths = [\r\n        'Jan',\r\n        'Feb',\r\n        'Mar',\r\n        'Apr',\r\n        'May',\r\n        'Jun',\r\n        'Jul',\r\n        'Aug',\r\n        'Sep',\r\n        'Oct',\r\n        'Nov',\r\n        'Dec'\r\n    ]\r\n    const date = new Date(timestamp)\r\n    return `${shortMouths[date.getMonth()]} ${date.getDate()}`\r\n}\r\n\r\nexport function isOver(mouse, x, length, dWidth) {\r\n    if (!mouse) return false\r\n    const width = dWidth / length\r\n    return Math.abs(x - mouse.x) < width / 2\r\n}\r\n\r\nexport function line(ctx, coords, { color, translate = 0 }) {\r\n    ctx.beginPath()\r\n    ctx.save()\r\n    ctx.lineWidth = 4\r\n    ctx.translate(translate, 0) \r\n    ctx.strokeStyle = color\r\n    for (const [x, y] of coords) {\r\n        ctx.lineTo(x, y)\r\n    }\r\n    ctx.stroke()\r\n    ctx.restore()\r\n    ctx.closePath()\r\n}\r\n\r\nexport function circle(ctx, [x, y], { color }, rad) {\r\n    ctx.beginPath()\r\n    ctx.strokeStyle = color\r\n    ctx.fillStyle = '#fff'\r\n    ctx.lineWidth = 8;\r\n    ctx.arc(x, y, rad, 0, 2 * Math.PI)\r\n    ctx.stroke()\r\n    ctx.fill()\r\n    ctx.closePath()\r\n}\r\n\r\nexport function computeBounderies({ columns, types }) {\r\n    let min\r\n    let max\r\n\r\n    columns.forEach(col => {\r\n        if (types[col[0]] !== 'line') {\r\n            return\r\n        }\r\n        if (typeof min != \"number\") min = col[1]\r\n        if (typeof max != \"number\") max = col[1]\r\n\r\n        if (min > col[1]) min = col[1]\r\n        if (max < col[1]) max = col[1]\r\n\r\n        for (let i = 2; i < col.length; i++) {\r\n            if (min > col[i]) min = col[i]\r\n            if (max < col[i]) max = col[i]\r\n        }\r\n    })\r\n\r\n    return [min, max]\r\n}\r\n\r\nexport function css(el, styles = {}) {\r\n    Object.assign(el.style, styles)\r\n}\r\n\r\nexport function toCoords(xRatio, yRatio, DPI_HEIGHT, PADDING, yMin) {\r\n    return (col) => \r\n    col.map((y, i) =>[\r\n        Math.floor((i - 1) * xRatio), \r\n        Math.floor(DPI_HEIGHT - PADDING - (y - yMin) / yRatio)\r\n    ])\r\n    .filter((_, i) => i !== 0)\r\n}\r\n\r\n","import { css } from \"./utils\"\r\n\r\nconst template = (data) => `\r\n    <div class=\"tooltip-title\">${data.title}</div>\r\n    <ul class=\"tooltip-list\">\r\n        ${data.items\r\n            .map((item) => {\r\n                return `\r\n                <li class=\"tooltip-list-item\">\r\n                    <div class=\"vlaue\" style=\"color:${item.color}\">${item.value}</div>\r\n                    <div class=\"name\" style=\"color:${item.color}\">${item.name}</div>\r\n                </li>`\r\n            })\r\n            .join('\\n')}          \r\n    </ul>\r\n`\r\nexport function tooltip(el) {\r\n    const clear = () => (el.innerHTML = '')\r\n    return {\r\n        show({ left, top }, data) {\r\n            const { height, width } = el.getBoundingClientRect()\r\n            clear()\r\n            css(el, {\r\n                display: 'block',\r\n                top: top - height + 'px',\r\n                left: left + width / 2 + 'px',\r\n            })\r\n            el.insertAdjacentHTML('afterbegin', template(data))\r\n        },\r\n        hide() {\r\n            css(el, { display: 'none' })\r\n        }\r\n    }\r\n}","import { css, computeBounderies, toCoords, line, computeXRatio, computeYRatio } from \"./utils\"\r\n\r\nfunction noop() {}\r\n\r\nconst HEIGHT = 40\r\nconst DPI_HEIGHT = HEIGHT * 2\r\n\r\nexport function sliderChart(root, data, DPI_WIDTH) {\r\n    const WIDTH = DPI_WIDTH / 2\r\n    const MIN_WIDTH = WIDTH * 0.05\r\n    const canvas = root.querySelector('canvas')\r\n    const ctx = canvas.getContext('2d')\r\n    let nextFn = noop\r\n    canvas.width = DPI_WIDTH\r\n    canvas.height = DPI_HEIGHT\r\n    css(canvas, {\r\n        width: WIDTH + 'px',\r\n        height: HEIGHT + 'px'\r\n    })\r\n\r\n    const $left = root.querySelector('[data-el=\"left\"]')\r\n    const $window = root.querySelector('[data-el=\"window\"]')\r\n    const $right = root.querySelector('[data-el=\"right\"]')\r\n\r\n    function next() {\r\n        nextFn(getPosition())\r\n    }\r\n\r\n    function mousedown(event) {\r\n        const type = event.target.dataset.type\r\n        const demensions = {\r\n            left: parseInt($window.style.left),\r\n            right: parseInt($window.style.right),\r\n            width: parseInt($window.style.width),\r\n        }\r\n\r\n        if (type === 'window') {\r\n            const startX = event.pageX\r\n            document.onmousemove = (e) => {\r\n                const delta = startX - e.pageX\r\n                if (delta === 0) {\r\n                    return\r\n                }\r\n\r\n                const left = demensions.left - delta\r\n                const right = WIDTH - left - demensions.width\r\n\r\n                setPosition(left, right)\r\n                next()\r\n            }\r\n        } else if (type === 'left' || type === 'right') {\r\n            const startX = event.pageX\r\n            document.onmousemove = (e) => {\r\n                const delta = startX - e.pageX\r\n                if (delta === 0) {\r\n                    return\r\n                }\r\n\r\n                if (type === 'left') {\r\n                    const left = WIDTH - (demensions.width + delta) - demensions.right\r\n                    const right = WIDTH - (demensions.width + delta) - demensions.left\r\n                    setPosition(left, right)\r\n                } else {\r\n                    const right = WIDTH - (demensions.width - delta) - demensions.left\r\n                    setPosition(demensions.left, right)\r\n                }\r\n                next()\r\n            }\r\n        }\r\n    }\r\n\r\n    function mouseup() {\r\n        document.onmousemove = null\r\n    }\r\n\r\n    root.addEventListener('mousedown', mousedown)\r\n    document.addEventListener('mouseup', mouseup)\r\n\r\n    const defaultWidth = WIDTH * 0.3\r\n    setPosition(0, WIDTH - defaultWidth)\r\n\r\n    function setPosition(left, right) {\r\n        const w = WIDTH - right - left\r\n\r\n        if (w < MIN_WIDTH) {\r\n            css($window, {width: MIN_WIDTH + 'px'})\r\n            return\r\n        }\r\n\r\n        if (left < 0) {\r\n            css($window, {left: '0px'})\r\n            css($left, {width: '0px'})\r\n            return\r\n        }\r\n\r\n        if (right < 0) {\r\n            css($window, {right: '0px'})\r\n            css($right, {width: '0px'})\r\n            return\r\n        }\r\n\r\n        css($window, {\r\n            width: w + 'px',\r\n            left: left + 'px',\r\n            right: right + 'px'\r\n        })\r\n        \r\n        css($right, {width: right + 'px'})\r\n        css($left, {width: left + 'px'})\r\n    }\r\n\r\n    function getPosition() {\r\n        const left = parseInt($left.style.width)\r\n        const right = WIDTH - parseInt($right.style.width)\r\n\r\n        return [\r\n            (left * 100) / WIDTH,\r\n            (right * 100) / WIDTH\r\n        ]\r\n    }\r\n\r\n    const [yMin, yMax] = computeBounderies(data)\r\n    // const yRatio = DPI_HEIGHT / (yMax - yMin)\r\n    // const xRatio = DPI_WIDTH / (data.columns[0].length - 2)\r\n    const yRatio = computeYRatio(DPI_HEIGHT, yMax, yMin)\r\n    const xRatio = computeXRatio(DPI_WIDTH, data.columns[0].length)\r\n\r\n    const yData = data.columns.filter(col => data.types[col[0]] === 'line')\r\n\r\n    yData.map(toCoords(xRatio, yRatio, DPI_HEIGHT, 0, yMin)).forEach((coords, idx) => {\r\n        const color = data.colors[yData[idx][0]]\r\n        line(ctx, coords, { color })\r\n    })\r\n\r\n    return {\r\n        subscribe(fn) {\r\n            nextFn = fn\r\n            fn(getPosition())\r\n        }\r\n    }\r\n}","import { tooltip } from \"./tooltip\";\r\nimport {\r\n  toDate,\r\n  toCoords,\r\n  isOver,\r\n  line,\r\n  circle,\r\n  computeBounderies,\r\n  computeXRatio,\r\n  computeYRatio,\r\n  css,\r\n} from \"./utils\";\r\nimport { sliderChart } from \"./slider\";\r\n\r\nconst WIDTH = 600;\r\nconst HEIGHT = 200;\r\nconst DPI_WIDTH = WIDTH * 2;\r\nconst DPI_HEIGHT = HEIGHT * 2;\r\nconst PADDING = 40;\r\nconst VIEW_HEIGHT = DPI_HEIGHT - PADDING * 2;\r\nconst VIEW_WIDTH = DPI_WIDTH;\r\nconst ROWS_COUNT = 5;\r\nconst CIRCLE_RADIUS = 7;\r\nconst SPEED = 300;\r\n\r\nexport function chart(root, data) {\r\n  const canvas = root.querySelector('[data-el=\"main\"]');\r\n  const tip = tooltip(root.querySelector('[data-el=\"tooltip\"]'));\r\n  const slider = sliderChart(\r\n    root.querySelector('[data-el=\"slider\"]'),\r\n    data,\r\n    DPI_WIDTH\r\n  );\r\n  const ctx = canvas.getContext(\"2d\");\r\n  let raf;\r\n  canvas.width = DPI_WIDTH;\r\n  canvas.height = DPI_HEIGHT;\r\n  css(canvas, {\r\n    width: WIDTH + \"px\",\r\n    height: HEIGHT + \"px\",\r\n  });\r\n\r\n  const proxy = new Proxy(\r\n    {},\r\n    {\r\n      set(...args) {\r\n        const result = Reflect.set(...args);\r\n        raf = requestAnimationFrame(paint);\r\n        return result;\r\n      },\r\n    }\r\n  );\r\n\r\n  slider.subscribe((pos) => {\r\n    proxy.pos = pos;\r\n  });\r\n\r\n  function mousemove({ clientX, clientY }) {\r\n    const { left, top } = canvas.getBoundingClientRect();\r\n    proxy.mouse = {\r\n      x: (clientX - left) * 2,\r\n      tooltip: {\r\n        left: clientX - left,\r\n        top: clientY - top,\r\n      },\r\n    };\r\n  }\r\n\r\n  function mouseleave() {\r\n    (proxy.mouse = null), tip.hide();\r\n  }\r\n\r\n  // function translateX(length, xRatio, left) {\r\n  //     return -1 * Math.round((left * length * xRatio) / 100)\r\n  // }\r\n\r\n  canvas.addEventListener(\"mousemove\", mousemove);\r\n  canvas.addEventListener(\"mouseleave\", mouseleave);\r\n\r\n  function clear() {\r\n    ctx.clearRect(0, 0, DPI_WIDTH, DPI_HEIGHT);\r\n  }\r\n\r\n  // function getMax(yMax) {\r\n  //     const step = (yMax - prevMax) / SPEED\r\n\r\n  //     if (proxy.max < yMax) {\r\n  //         proxy.max += step\r\n  //     } else if (proxy.max > yMax) {\r\n  //         proxy.max = yMax\r\n  //         prevMax = yMax\r\n  //     }\r\n\r\n  function paint() {\r\n    clear();\r\n    const length = data.columns[0].length;\r\n    const leftIndex = Math.round((length * proxy.pos[0]) / 100);\r\n    const rightIndex = Math.round((length * proxy.pos[1]) / 100);\r\n\r\n    const columns = data.columns.map((col) => {\r\n      const res = col.slice(leftIndex, rightIndex);\r\n      if (typeof res[0] != \"string\") {\r\n        res.unshift(col[0]);\r\n      }\r\n      return res;\r\n    });\r\n\r\n    const [yMin, yMax] = computeBounderies({ columns, types: data.types });\r\n\r\n    // if (!prevMax) {\r\n    //     prevMax = yMax\r\n    //     proxy.max = yMax\r\n    // }\r\n\r\n    // const max = getMax(yMax)\r\n\r\n    // const yRatio = VIEW_HEIGHT / (yMax - yMin)\r\n    // const xRatio = VIEW_WIDTH / (columns[0].length - 2)\r\n    const yRatio = computeYRatio(VIEW_HEIGHT, yMax, yMin);\r\n    const xRatio = computeXRatio(VIEW_WIDTH, columns[0].length);\r\n\r\n    // const translate = translateX(data.columns[0].length, xRatio, proxy.pos[0])\r\n\r\n    const yData = columns.filter((col) => data.types[col[0]] === \"line\");\r\n    const xData = columns.filter((col) => data.types[col[0]] !== \"line\")[0];\r\n\r\n    yAxis(yMin, yMax);\r\n    xAxis(xData, yData, xRatio);\r\n\r\n    yData\r\n      .map(toCoords(xRatio, yRatio, DPI_HEIGHT, PADDING, yMin))\r\n      .forEach((coords, idx) => {\r\n        const color = data.colors[yData[idx][0]];\r\n        line(ctx, coords, { color });\r\n\r\n        for (const [x, y] of coords) {\r\n          if (isOver(proxy.mouse, x, coords.length, DPI_WIDTH)) {\r\n            circle(ctx, [x, y], { color }, CIRCLE_RADIUS);\r\n            break;\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  function xAxis(xData, yData, xRatio) {\r\n    const colsCount = 6;\r\n    const step = Math.round(xData.length / colsCount);\r\n    ctx.beginPath();\r\n    for (let i = 1; i < xData.length; i++) {\r\n      const x = i * xRatio;\r\n\r\n      if ((i - 1) % step === 0) {\r\n        const text = toDate(xData[i]);\r\n        ctx.fillText(text.toString(), x, DPI_HEIGHT - 10);\r\n      }\r\n\r\n      if (isOver(proxy.mouse, x, xData.length, DPI_WIDTH)) {\r\n        ctx.save();\r\n        ctx.moveTo(x, PADDING);\r\n        ctx.lineTo(x, DPI_HEIGHT - PADDING);\r\n        ctx.restore();\r\n\r\n        tip.show(proxy.mouse.tooltip, {\r\n          title: toDate(xData[i]),\r\n          items: yData.map((col) => ({\r\n            color: data.colors[col[0]],\r\n            name: data.names[col[0]],\r\n            value: col[i + 1],\r\n          })),\r\n        });\r\n      }\r\n    }\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n  }\r\n\r\n  function yAxis(yMin, yMax) {\r\n    const step = VIEW_HEIGHT / ROWS_COUNT;\r\n    const textStep = (yMax - yMin) / ROWS_COUNT;\r\n\r\n    ctx.beginPath();\r\n    ctx.lineWidth = 2;\r\n    ctx.strokeStyle = \"#bbb\";\r\n    ctx.font = \"normal 20px Helvetica, sans-serif\";\r\n    ctx.fillStyle = \"#96a2aa\";\r\n    for (let i = 1; i <= ROWS_COUNT; i++) {\r\n      const y = step * i;\r\n      const text = Math.round(yMax - textStep * i);\r\n      ctx.fillText(text.toString(), 5, y + PADDING - 10);\r\n      ctx.moveTo(0, y + PADDING);\r\n      ctx.lineTo(DPI_WIDTH, y + PADDING);\r\n    }\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n  }\r\n\r\n  return {\r\n    init() {\r\n      paint();\r\n    },\r\n    destroy() {\r\n      cancelAnimationFrame(raf);\r\n      canvas.removeEventListener(\"mousemove\", mousemove);\r\n      canvas.removeEventListener(\"mouseleave\", mouseleave);\r\n    },\r\n  };\r\n}\r\n","export function getChartData() {\n  return [\n    {\n      columns: [\n        [\n          'x',\n          1542412800000,\n          1542499200000,\n          1542585600000,\n          1542672000000,\n          1542758400000,\n          1542844800000,\n          1542931200000,\n          1543017600000,\n          1543104000000,\n          1543190400000,\n          1543276800000,\n          1543363200000,\n          1543449600000,\n          1543536000000,\n          1543622400000,\n          1543708800000,\n          1543795200000,\n          1543881600000,\n          1543968000000,\n          1544054400000,\n          1544140800000,\n          1544227200000,\n          1544313600000,\n          1544400000000,\n          1544486400000,\n          1544572800000,\n          1544659200000,\n          1544745600000,\n          1544832000000,\n          1544918400000,\n          1545004800000,\n          1545091200000,\n          1545177600000,\n          1545264000000,\n          1545350400000,\n          1545436800000,\n          1545523200000,\n          1545609600000,\n          1545696000000,\n          1545782400000,\n          1545868800000,\n          1545955200000,\n          1546041600000,\n          1546128000000,\n          1546214400000,\n          1546300800000,\n          1546387200000,\n          1546473600000,\n          1546560000000,\n          1546646400000,\n          1546732800000,\n          1546819200000,\n          1546905600000,\n          1546992000000,\n          1547078400000,\n          1547164800000,\n          1547251200000,\n          1547337600000,\n          1547424000000,\n          1547510400000,\n          1547596800000,\n          1547683200000,\n          1547769600000,\n          1547856000000,\n          1547942400000,\n          1548028800000,\n          1548115200000,\n          1548201600000,\n          1548288000000,\n          1548374400000,\n          1548460800000,\n          1548547200000,\n          1548633600000,\n          1548720000000,\n          1548806400000,\n          1548892800000,\n          1548979200000,\n          1549065600000,\n          1549152000000,\n          1549238400000,\n          1549324800000,\n          1549411200000,\n          1549497600000,\n          1549584000000,\n          1549670400000,\n          1549756800000,\n          1549843200000,\n          1549929600000,\n          1550016000000,\n          1550102400000,\n          1550188800000,\n          1550275200000,\n          1550361600000,\n          1550448000000,\n          1550534400000,\n          1550620800000,\n          1550707200000,\n          1550793600000,\n          1550880000000,\n          1550966400000,\n          1551052800000,\n          1551139200000,\n          1551225600000,\n          1551312000000,\n          1551398400000,\n          1551484800000,\n          1551571200000,\n          1551657600000,\n          1551744000000,\n          1551830400000,\n          1551916800000,\n          1552003200000,\n        ],\n        [\n          'y0',\n          37,\n          20,\n          32,\n          39,\n          32,\n          35,\n          19,\n          65,\n          36,\n          62,\n          113,\n          69,\n          120,\n          60,\n          51,\n          49,\n          71,\n          122,\n          149,\n          69,\n          57,\n          21,\n          33,\n          55,\n          92,\n          62,\n          47,\n          50,\n          56,\n          116,\n          63,\n          60,\n          55,\n          65,\n          76,\n          33,\n          45,\n          64,\n          54,\n          81,\n          180,\n          123,\n          106,\n          37,\n          60,\n          70,\n          46,\n          68,\n          46,\n          51,\n          33,\n          57,\n          75,\n          70,\n          95,\n          70,\n          50,\n          68,\n          63,\n          66,\n          53,\n          38,\n          52,\n          109,\n          121,\n          53,\n          36,\n          71,\n          96,\n          55,\n          58,\n          29,\n          31,\n          55,\n          52,\n          44,\n          126,\n          191,\n          73,\n          87,\n          255,\n          278,\n          219,\n          170,\n          129,\n          125,\n          126,\n          84,\n          65,\n          53,\n          154,\n          57,\n          71,\n          64,\n          75,\n          72,\n          39,\n          47,\n          52,\n          73,\n          89,\n          156,\n          86,\n          105,\n          88,\n          45,\n          33,\n          56,\n          142,\n          124,\n          114,\n          64,\n        ],\n        [\n          'y1',\n          22,\n          12,\n          30,\n          40,\n          33,\n          23,\n          18,\n          41,\n          45,\n          69,\n          57,\n          61,\n          70,\n          47,\n          31,\n          34,\n          40,\n          55,\n          27,\n          57,\n          48,\n          32,\n          40,\n          49,\n          54,\n          49,\n          34,\n          51,\n          51,\n          51,\n          66,\n          51,\n          94,\n          60,\n          64,\n          28,\n          44,\n          96,\n          49,\n          73,\n          30,\n          88,\n          63,\n          42,\n          56,\n          67,\n          52,\n          67,\n          35,\n          61,\n          40,\n          55,\n          63,\n          61,\n          105,\n          59,\n          51,\n          76,\n          63,\n          57,\n          47,\n          56,\n          51,\n          98,\n          103,\n          62,\n          54,\n          104,\n          48,\n          41,\n          41,\n          37,\n          30,\n          28,\n          26,\n          37,\n          65,\n          86,\n          70,\n          81,\n          54,\n          74,\n          70,\n          50,\n          74,\n          79,\n          85,\n          62,\n          36,\n          46,\n          68,\n          43,\n          66,\n          50,\n          28,\n          66,\n          39,\n          23,\n          63,\n          74,\n          83,\n          66,\n          40,\n          60,\n          29,\n          36,\n          27,\n          54,\n          89,\n          50,\n          73,\n          52,\n        ],\n      ],\n      types: {\n        y0: 'line',\n        y1: 'line',\n        x: 'x',\n      },\n      names: {\n        y0: '#0',\n        y1: '#1',\n      },\n      colors: {\n        y0: '#3DC23F',\n        y1: '#F34C44',\n      },\n    },\n  ][0]\n}\n","import { chart } from \"./modules/chart\"\r\nimport { getChartData } from \"./data\"\r\nimport './styles.scss'\r\n\r\nconst tgChart = chart(document.querySelector('#chart'), getChartData()).init()"]}